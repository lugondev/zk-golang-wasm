// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package solidity

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MerkleCircuitMetaData contains all meta data concerning the MerkleCircuit contract.
var MerkleCircuitMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"input\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50611ce8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190611542565b610060565b60405161005791906115c6565b60405180910390f35b600061006a6110df565b604051806040016040528087600060028110610089576100886115e1565b5b60200201518152602001876001600281106100a7576100a66115e1565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100e1576100e06115e1565b5b60200201516000600281106100f9576100f86115e1565b5b6020020151815260200188600060028110610117576101166115e1565b5b602002015160016002811061012f5761012e6115e1565b5b6020020151815250815260200160405180604001604052808860016002811061015b5761015a6115e1565b5b6020020151600060028110610173576101726115e1565b5b6020020151815260200188600160028110610191576101906115e1565b5b60200201516001600281106101a9576101a86115e1565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101db576101da6115e1565b5b60200201518152602001856001600281106101f9576101f86115e1565b5b602002015181525081604001819052506000610213610735565b90506000604051806040016040528060008152602001600081525090507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360000151600001511061029a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102919061166d565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783600001516020015110610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb906116d9565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47836020015160000151600060028110610341576103406115e1565b5b602002015110610386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037d90611745565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360200151602001516000600281106103c3576103c26115e1565b5b602002015110610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff906117b1565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47836020015160000151600160028110610445576104446115e1565b5b60200201511061048a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104819061181d565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360200151602001516001600281106104c7576104c66115e1565b5b60200201511061050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390611889565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783604001516000015110610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d906118f5565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47836040015160200151106105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790611961565b60405180910390fd5b60005b60018110156106cb577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018682600181106106205761061f6115e1565b5b602002015110610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c906119cd565b60405180910390fd5b6106b6826106b1856080015160018561067e9190611a1c565b6002811061068f5761068e6115e1565b5b60200201518985600181106106a7576106a66115e1565b5b6020020151610ad5565b610bad565b915080806106c390611a50565b9150506105e3565b506106f28183608001516000600281106106e8576106e76115e1565b5b6020020151610bad565b90506107286107048460000151610cab565b84602001518460000151856020015185876040015189604001518960600151610d69565b9350505050949350505050565b61073d611112565b60405180604001604052807f1c5eed4d581011b023646901c391a097265cb2b3cbe89b8d1416a6da4aea185781526020017f038cfebc5579a587af25f7a6b9cb566b2293d4ebcdee7b40d07f6b102b190d318152508160000181905250604051806040016040528060405180604001604052807e4155a4bc591f70a1141e5ebce4f7411700d62b50f501976c7ca6dfd2c71c4981526020017f1ee37b67b9c0fb735402ffdf077d191650f389f9bd8090d9b5d2a4c355283dda815250815260200160405180604001604052807f090b6c5209f397dea6b0904b7e5f42e7fa6bcce42bcf7fcf983cfdbf94c7238181526020017f11ff754542ed58f038ea77f40d700d6f8123f718371da66c766e64fa0b757a698152508152508160200181905250604051806040016040528060405180604001604052807f0b6054588b9d259f760cd8be2bf57cf7939dd477a6e5e13ab2932753954fd7f581526020017f1cd30a0ae8f23ac3b0fe2e0401f53e97a1fdf495f6e583670096249e0c74f837815250815260200160405180604001604052807f19b528791dda428a77e996e4b33610097e366323f227e63f0eb2df79cb77005f81526020017f151188d6b637157f891e2ce0ed6aab8b7b5c4e24b7dee681864b66123e3f5abb8152508152508160400181905250604051806040016040528060405180604001604052807f264c52f82c7b684bc11768da2289046788162d0107dce2f2c444ecf07e24d3dd81526020017f112a7bccec6f8d455ffc9b7e1d3f082e985b28163a35366586ed4dcae5e2b292815250815260200160405180604001604052807f2a84e8b2ad87eaac3a6ba2be08c14741a9873eb92a5e824f7a8f8915ea75291881526020017f14888da79dc01531430c77cf746bc919ef1f79e027eaf02b516f25e9299289b7815250815250816060018190525060405180604001604052807f18dea4ed3a45f61b56e3be3b2b3359c08eaa445ceba3a61473a7cda1a6007d4a81526020017f1c2bc709c3afb6affa3bdbbb1ef1d81d7243c4649542bca7e9a4593a03bdfd818152508160800151600060028110610a5557610a546115e1565b5b602002018190525060405180604001604052807f07825bbad921d917510a375416e6da56be8208799e5e959ec5cbd164a648900c81526020017f071662deb3d78341aa44a5266f134d1c9d85585b9f12e3f81c7108d0c9a899dd8152508160800151600160028110610aca57610ac96115e1565b5b602002018190525090565b610add61115f565b610ae5611179565b836000015181600060038110610afe57610afd6115e1565b5b602002018181525050836020015181600160038110610b2057610b1f6115e1565b5b6020020181815250508281600260038110610b3e57610b3d6115e1565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610b6457fe5b5080610ba5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9c90611ae4565b60405180910390fd5b505092915050565b610bb561115f565b610bbd61119b565b836000015181600060048110610bd657610bd56115e1565b5b602002018181525050836020015181600160048110610bf857610bf76115e1565b5b602002018181525050826000015181600260048110610c1a57610c196115e1565b5b602002018181525050826020015181600360048110610c3c57610c3b6115e1565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610c6257fe5b5080610ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9a90611b50565b60405180910390fd5b505092915050565b610cb361115f565b60008260000151148015610ccb575060008260200151145b15610cee5760405180604001604052806000815260200160008152509050610d64565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478460200151610d339190611b9f565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610d5e9190611bd0565b81525090505b919050565b60008060405180608001604052808b8152602001898152602001878152602001858152509050600060405180608001604052808b815260200189815260200187815260200185815250905060006018905060008167ffffffffffffffff811115610dd657610dd5611279565b5b604051908082528060200260200182016040528015610e045781602001602082028036833780820191505090505b50905060005b6004811015611042576000600682610e229190611c04565b9050858260048110610e3757610e366115e1565b5b60200201516000015183600083610e4e9190611a1c565b81518110610e5f57610e5e6115e1565b5b602002602001018181525050858260048110610e7e57610e7d6115e1565b5b60200201516020015183600183610e959190611a1c565b81518110610ea657610ea56115e1565b5b602002602001018181525050848260048110610ec557610ec46115e1565b5b602002015160000151600060028110610ee157610ee06115e1565b5b602002015183600283610ef49190611a1c565b81518110610f0557610f046115e1565b5b602002602001018181525050848260048110610f2457610f236115e1565b5b602002015160000151600160028110610f4057610f3f6115e1565b5b602002015183600383610f539190611a1c565b81518110610f6457610f636115e1565b5b602002602001018181525050848260048110610f8357610f826115e1565b5b602002015160200151600060028110610f9f57610f9e6115e1565b5b602002015183600483610fb29190611a1c565b81518110610fc357610fc26115e1565b5b602002602001018181525050848260048110610fe257610fe16115e1565b5b602002015160200151600160028110610ffe57610ffd6115e1565b5b6020020151836005836110119190611a1c565b81518110611022576110216115e1565b5b60200260200101818152505050808061103a90611a50565b915050610e0a565b5061104b6111bd565b6000602082602086026020860160086107d05a03fa9050806000810361106d57fe5b50806110ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a590611c92565b60405180910390fd5b6000826000600181106110c4576110c36115e1565b5b60200201511415965050505050505098975050505050505050565b60405180606001604052806110f261115f565b81526020016110ff6111df565b815260200161110c61115f565b81525090565b6040518060a0016040528061112561115f565b81526020016111326111df565b815260200161113f6111df565b815260200161114c6111df565b8152602001611159611205565b81525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b60405180604001604052806111f2611232565b81526020016111ff611232565b81525090565b60405180604001604052806002905b61121c61115f565b8152602001906001900390816112145790505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112b182611268565b810181811067ffffffffffffffff821117156112d0576112cf611279565b5b80604052505050565b60006112e3611254565b90506112ef82826112a8565b919050565b600067ffffffffffffffff82111561130f5761130e611279565b5b602082029050919050565b600080fd5b6000819050919050565b6113328161131f565b811461133d57600080fd5b50565b60008135905061134f81611329565b92915050565b6000611368611363846112f4565b6112d9565b905080602084028301858111156113825761138161131a565b5b835b818110156113ab57806113978882611340565b845260208401935050602081019050611384565b5050509392505050565b600082601f8301126113ca576113c9611263565b5b60026113d7848285611355565b91505092915050565b600067ffffffffffffffff8211156113fb576113fa611279565b5b602082029050919050565b6000611419611414846113e0565b6112d9565b905080604084028301858111156114335761143261131a565b5b835b8181101561145c578061144888826113b5565b845260208401935050604081019050611435565b5050509392505050565b600082601f83011261147b5761147a611263565b5b6002611488848285611406565b91505092915050565b600067ffffffffffffffff8211156114ac576114ab611279565b5b602082029050919050565b60006114ca6114c584611491565b6112d9565b905080602084028301858111156114e4576114e361131a565b5b835b8181101561150d57806114f98882611340565b8452602084019350506020810190506114e6565b5050509392505050565b600082601f83011261152c5761152b611263565b5b60016115398482856114b7565b91505092915050565b600080600080610120858703121561155d5761155c61125e565b5b600061156b878288016113b5565b945050604061157c87828801611466565b93505060c061158d878288016113b5565b92505061010061159f87828801611517565b91505092959194509250565b60008115159050919050565b6115c0816115ab565b82525050565b60006020820190506115db60008301846115b7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f76657269666965722d61582d6774652d7072696d652d71000000000000000000600082015250565b6000611657601783611610565b915061166282611621565b602082019050919050565b600060208201905081810360008301526116868161164a565b9050919050565b7f76657269666965722d61592d6774652d7072696d652d71000000000000000000600082015250565b60006116c3601783611610565b91506116ce8261168d565b602082019050919050565b600060208201905081810360008301526116f2816116b6565b9050919050565b7f76657269666965722d6258302d6774652d7072696d652d710000000000000000600082015250565b600061172f601883611610565b915061173a826116f9565b602082019050919050565b6000602082019050818103600083015261175e81611722565b9050919050565b7f76657269666965722d6259302d6774652d7072696d652d710000000000000000600082015250565b600061179b601883611610565b91506117a682611765565b602082019050919050565b600060208201905081810360008301526117ca8161178e565b9050919050565b7f76657269666965722d6258312d6774652d7072696d652d710000000000000000600082015250565b6000611807601883611610565b9150611812826117d1565b602082019050919050565b60006020820190508181036000830152611836816117fa565b9050919050565b7f76657269666965722d6259312d6774652d7072696d652d710000000000000000600082015250565b6000611873601883611610565b915061187e8261183d565b602082019050919050565b600060208201905081810360008301526118a281611866565b9050919050565b7f76657269666965722d63582d6774652d7072696d652d71000000000000000000600082015250565b60006118df601783611610565b91506118ea826118a9565b602082019050919050565b6000602082019050818103600083015261190e816118d2565b9050919050565b7f76657269666965722d63592d6774652d7072696d652d71000000000000000000600082015250565b600061194b601783611610565b915061195682611915565b602082019050919050565b6000602082019050818103600083015261197a8161193e565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b60006119b7601f83611610565b91506119c282611981565b602082019050919050565b600060208201905081810360008301526119e6816119aa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a278261131f565b9150611a328361131f565b9250828201905080821115611a4a57611a496119ed565b5b92915050565b6000611a5b8261131f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a8d57611a8c6119ed565b5b600182019050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b6000611ace601283611610565b9150611ad982611a98565b602082019050919050565b60006020820190508181036000830152611afd81611ac1565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b6000611b3a601283611610565b9150611b4582611b04565b602082019050919050565b60006020820190508181036000830152611b6981611b2d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611baa8261131f565b9150611bb58361131f565b925082611bc557611bc4611b70565b5b828206905092915050565b6000611bdb8261131f565b9150611be68361131f565b9250828203905081811115611bfe57611bfd6119ed565b5b92915050565b6000611c0f8261131f565b9150611c1a8361131f565b9250828202611c288161131f565b91508282048414831517611c3f57611c3e6119ed565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611c7c601583611610565b9150611c8782611c46565b602082019050919050565b60006020820190508181036000830152611cab81611c6f565b905091905056fea2646970667358221220b3cc0f07f7aa8aab6594809e379b05105b6b800a7850d38b4e3e3455092cfcc564736f6c63430008110033",
}

// MerkleCircuitABI is the input ABI used to generate the binding from.
// Deprecated: Use MerkleCircuitMetaData.ABI instead.
var MerkleCircuitABI = MerkleCircuitMetaData.ABI

// MerkleCircuitBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MerkleCircuitMetaData.Bin instead.
var MerkleCircuitBin = MerkleCircuitMetaData.Bin

// DeployMerkleCircuit deploys a new Ethereum contract, binding an instance of MerkleCircuit to it.
func DeployMerkleCircuit(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleCircuit, error) {
	parsed, err := MerkleCircuitMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MerkleCircuitBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleCircuit{MerkleCircuitCaller: MerkleCircuitCaller{contract: contract}, MerkleCircuitTransactor: MerkleCircuitTransactor{contract: contract}, MerkleCircuitFilterer: MerkleCircuitFilterer{contract: contract}}, nil
}

// MerkleCircuit is an auto generated Go binding around an Ethereum contract.
type MerkleCircuit struct {
	MerkleCircuitCaller     // Read-only binding to the contract
	MerkleCircuitTransactor // Write-only binding to the contract
	MerkleCircuitFilterer   // Log filterer for contract events
}

// MerkleCircuitCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleCircuitCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleCircuitTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleCircuitTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleCircuitFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleCircuitFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleCircuitSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleCircuitSession struct {
	Contract     *MerkleCircuit    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MerkleCircuitCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleCircuitCallerSession struct {
	Contract *MerkleCircuitCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MerkleCircuitTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleCircuitTransactorSession struct {
	Contract     *MerkleCircuitTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MerkleCircuitRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleCircuitRaw struct {
	Contract *MerkleCircuit // Generic contract binding to access the raw methods on
}

// MerkleCircuitCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleCircuitCallerRaw struct {
	Contract *MerkleCircuitCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleCircuitTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleCircuitTransactorRaw struct {
	Contract *MerkleCircuitTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleCircuit creates a new instance of MerkleCircuit, bound to a specific deployed contract.
func NewMerkleCircuit(address common.Address, backend bind.ContractBackend) (*MerkleCircuit, error) {
	contract, err := bindMerkleCircuit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleCircuit{MerkleCircuitCaller: MerkleCircuitCaller{contract: contract}, MerkleCircuitTransactor: MerkleCircuitTransactor{contract: contract}, MerkleCircuitFilterer: MerkleCircuitFilterer{contract: contract}}, nil
}

// NewMerkleCircuitCaller creates a new read-only instance of MerkleCircuit, bound to a specific deployed contract.
func NewMerkleCircuitCaller(address common.Address, caller bind.ContractCaller) (*MerkleCircuitCaller, error) {
	contract, err := bindMerkleCircuit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleCircuitCaller{contract: contract}, nil
}

// NewMerkleCircuitTransactor creates a new write-only instance of MerkleCircuit, bound to a specific deployed contract.
func NewMerkleCircuitTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleCircuitTransactor, error) {
	contract, err := bindMerkleCircuit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleCircuitTransactor{contract: contract}, nil
}

// NewMerkleCircuitFilterer creates a new log filterer instance of MerkleCircuit, bound to a specific deployed contract.
func NewMerkleCircuitFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleCircuitFilterer, error) {
	contract, err := bindMerkleCircuit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleCircuitFilterer{contract: contract}, nil
}

// bindMerkleCircuit binds a generic wrapper to an already deployed contract.
func bindMerkleCircuit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleCircuitABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleCircuit *MerkleCircuitRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleCircuit.Contract.MerkleCircuitCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleCircuit *MerkleCircuitRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleCircuit.Contract.MerkleCircuitTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleCircuit *MerkleCircuitRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleCircuit.Contract.MerkleCircuitTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleCircuit *MerkleCircuitCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleCircuit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleCircuit *MerkleCircuitTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleCircuit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleCircuit *MerkleCircuitTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleCircuit.Contract.contract.Transact(opts, method, params...)
}

// VerifyProof is a free data retrieval call binding the contract method 0x43753b4d.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] input) view returns(bool r)
func (_MerkleCircuit *MerkleCircuitCaller) VerifyProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [1]*big.Int) (bool, error) {
	var out []interface{}
	err := _MerkleCircuit.contract.Call(opts, &out, "verifyProof", a, b, c, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProof is a free data retrieval call binding the contract method 0x43753b4d.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] input) view returns(bool r)
func (_MerkleCircuit *MerkleCircuitSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [1]*big.Int) (bool, error) {
	return _MerkleCircuit.Contract.VerifyProof(&_MerkleCircuit.CallOpts, a, b, c, input)
}

// VerifyProof is a free data retrieval call binding the contract method 0x43753b4d.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] input) view returns(bool r)
func (_MerkleCircuit *MerkleCircuitCallerSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [1]*big.Int) (bool, error) {
	return _MerkleCircuit.Contract.VerifyProof(&_MerkleCircuit.CallOpts, a, b, c, input)
}
