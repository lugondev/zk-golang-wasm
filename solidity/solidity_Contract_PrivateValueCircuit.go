// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package solidity

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PrivateValueCircuitMetaData contains all meta data concerning the PrivateValueCircuit contract.
var PrivateValueCircuitMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"input\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50611ce9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190611543565b610060565b60405161005791906115c7565b60405180910390f35b600061006a6110e0565b604051806040016040528087600060028110610089576100886115e2565b5b60200201518152602001876001600281106100a7576100a66115e2565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100e1576100e06115e2565b5b60200201516000600281106100f9576100f86115e2565b5b6020020151815260200188600060028110610117576101166115e2565b5b602002015160016002811061012f5761012e6115e2565b5b6020020151815250815260200160405180604001604052808860016002811061015b5761015a6115e2565b5b6020020151600060028110610173576101726115e2565b5b6020020151815260200188600160028110610191576101906115e2565b5b60200201516001600281106101a9576101a86115e2565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101db576101da6115e2565b5b60200201518152602001856001600281106101f9576101f86115e2565b5b602002015181525081604001819052506000610213610735565b90506000604051806040016040528060008152602001600081525090507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360000151600001511061029a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102919061166e565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783600001516020015110610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb906116da565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47836020015160000151600060028110610341576103406115e2565b5b602002015110610386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037d90611746565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360200151602001516000600281106103c3576103c26115e2565b5b602002015110610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff906117b2565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47836020015160000151600160028110610445576104446115e2565b5b60200201511061048a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104819061181e565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360200151602001516001600281106104c7576104c66115e2565b5b60200201511061050c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105039061188a565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783604001516000015110610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d906118f6565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47836040015160200151106105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790611962565b60405180910390fd5b60005b60018110156106cb577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018682600181106106205761061f6115e2565b5b602002015110610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c906119ce565b60405180910390fd5b6106b6826106b1856080015160018561067e9190611a1d565b6002811061068f5761068e6115e2565b5b60200201518985600181106106a7576106a66115e2565b5b6020020151610ad6565b610bae565b915080806106c390611a51565b9150506105e3565b506106f28183608001516000600281106106e8576106e76115e2565b5b6020020151610bae565b90506107286107048460000151610cac565b84602001518460000151856020015185876040015189604001518960600151610d6a565b9350505050949350505050565b61073d611113565b60405180604001604052807f0a0f43931b920954df58056c8487067dbe2bc4ac39dd92c2be9b1ba5658b275d81526020017f0866a38f81253363676a401c69e2aa24a44a06295568db15a457df2943a295408152508160000181905250604051806040016040528060405180604001604052807f065e01e12d61b2d0c2b065d206515d05ce24b0ae9b410e82666e8d1541a29dd781526020017f0bff78ae776c8064ff1257d02559eb46fc1584ba2b8c9fa8892a84e595e0474d815250815260200160405180604001604052807f0c8a3dad0f9c25fa6da81d691b7b2d1ddbd7463ed3088ece0cd59d372d34b39381526020017f0cfe20ab90e342d05dbe57ef0c0ead6ca1d4c2f1cbdc3031c9556036ac9f1dc48152508152508160200181905250604051806040016040528060405180604001604052807f2f19cf97b711640fa0d667215d04e71b5532335582d811c6ce05f89e52bba08881526020017f1db08f59f649a23b14e2cd0a091165f5914fd4f966cfeb5e3fa5ff62a8305f70815250815260200160405180604001604052807f1477d9a406e5d894483ea28437724f96a6fa2c2ddadade2ab7568dae3d81149981526020017f20e36029ad3a309070c5a2cadd0b0cac1668fc1e4af745916e317659990baa4a8152508152508160400181905250604051806040016040528060405180604001604052807f0e9223d9ecd3eb1575135aa1c9c7327bf2958892f1dee3ec89078ce47c70051181526020017f28e684a7191ff3f438370d463b87ae85915a7d8a883a863121c0769db6ffcb8f815250815260200160405180604001604052807f07c773634347eb517c082e8d4961e9db6b1668404f690324a00f92e0c7d2e9ab81526020017f28d82138ba759eed6b0b872c90ceeb5d1cdbc56fafa661fdb835145c2e169424815250815250816060018190525060405180604001604052807f1f487858b8dcc286752cb889f48733094844e6a82197b6766ec762a0ed34202681526020017f2cdcfaa7215b67b5eec16729d13f8d6d45bcc15ab412dd2b62dd891287d1ac838152508160800151600060028110610a5657610a556115e2565b5b602002018190525060405180604001604052807f23426f18490852156b96845a47f339f410dfba1d2aff8e8296e99b9305dec87f81526020017f0f73a073d0224f7f3b6556af0034065a19ebde5867e339fd634d88bd6267fe5c8152508160800151600160028110610acb57610aca6115e2565b5b602002018190525090565b610ade611160565b610ae661117a565b836000015181600060038110610aff57610afe6115e2565b5b602002018181525050836020015181600160038110610b2157610b206115e2565b5b6020020181815250508281600260038110610b3f57610b3e6115e2565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610b6557fe5b5080610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d90611ae5565b60405180910390fd5b505092915050565b610bb6611160565b610bbe61119c565b836000015181600060048110610bd757610bd66115e2565b5b602002018181525050836020015181600160048110610bf957610bf86115e2565b5b602002018181525050826000015181600260048110610c1b57610c1a6115e2565b5b602002018181525050826020015181600360048110610c3d57610c3c6115e2565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610c6357fe5b5080610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90611b51565b60405180910390fd5b505092915050565b610cb4611160565b60008260000151148015610ccc575060008260200151145b15610cef5760405180604001604052806000815260200160008152509050610d65565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478460200151610d349190611ba0565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610d5f9190611bd1565b81525090505b919050565b60008060405180608001604052808b8152602001898152602001878152602001858152509050600060405180608001604052808b815260200189815260200187815260200185815250905060006018905060008167ffffffffffffffff811115610dd757610dd661127a565b5b604051908082528060200260200182016040528015610e055781602001602082028036833780820191505090505b50905060005b6004811015611043576000600682610e239190611c05565b9050858260048110610e3857610e376115e2565b5b60200201516000015183600083610e4f9190611a1d565b81518110610e6057610e5f6115e2565b5b602002602001018181525050858260048110610e7f57610e7e6115e2565b5b60200201516020015183600183610e969190611a1d565b81518110610ea757610ea66115e2565b5b602002602001018181525050848260048110610ec657610ec56115e2565b5b602002015160000151600060028110610ee257610ee16115e2565b5b602002015183600283610ef59190611a1d565b81518110610f0657610f056115e2565b5b602002602001018181525050848260048110610f2557610f246115e2565b5b602002015160000151600160028110610f4157610f406115e2565b5b602002015183600383610f549190611a1d565b81518110610f6557610f646115e2565b5b602002602001018181525050848260048110610f8457610f836115e2565b5b602002015160200151600060028110610fa057610f9f6115e2565b5b602002015183600483610fb39190611a1d565b81518110610fc457610fc36115e2565b5b602002602001018181525050848260048110610fe357610fe26115e2565b5b602002015160200151600160028110610fff57610ffe6115e2565b5b6020020151836005836110129190611a1d565b81518110611023576110226115e2565b5b60200260200101818152505050808061103b90611a51565b915050610e0b565b5061104c6111be565b6000602082602086026020860160086107d05a03fa9050806000810361106e57fe5b50806110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690611c93565b60405180910390fd5b6000826000600181106110c5576110c46115e2565b5b60200201511415965050505050505098975050505050505050565b60405180606001604052806110f3611160565b81526020016111006111e0565b815260200161110d611160565b81525090565b6040518060a00160405280611126611160565b81526020016111336111e0565b81526020016111406111e0565b815260200161114d6111e0565b815260200161115a611206565b81525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b60405180604001604052806111f3611233565b8152602001611200611233565b81525090565b60405180604001604052806002905b61121d611160565b8152602001906001900390816112155790505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112b282611269565b810181811067ffffffffffffffff821117156112d1576112d061127a565b5b80604052505050565b60006112e4611255565b90506112f082826112a9565b919050565b600067ffffffffffffffff8211156113105761130f61127a565b5b602082029050919050565b600080fd5b6000819050919050565b61133381611320565b811461133e57600080fd5b50565b6000813590506113508161132a565b92915050565b6000611369611364846112f5565b6112da565b905080602084028301858111156113835761138261131b565b5b835b818110156113ac57806113988882611341565b845260208401935050602081019050611385565b5050509392505050565b600082601f8301126113cb576113ca611264565b5b60026113d8848285611356565b91505092915050565b600067ffffffffffffffff8211156113fc576113fb61127a565b5b602082029050919050565b600061141a611415846113e1565b6112da565b905080604084028301858111156114345761143361131b565b5b835b8181101561145d578061144988826113b6565b845260208401935050604081019050611436565b5050509392505050565b600082601f83011261147c5761147b611264565b5b6002611489848285611407565b91505092915050565b600067ffffffffffffffff8211156114ad576114ac61127a565b5b602082029050919050565b60006114cb6114c684611492565b6112da565b905080602084028301858111156114e5576114e461131b565b5b835b8181101561150e57806114fa8882611341565b8452602084019350506020810190506114e7565b5050509392505050565b600082601f83011261152d5761152c611264565b5b600161153a8482856114b8565b91505092915050565b600080600080610120858703121561155e5761155d61125f565b5b600061156c878288016113b6565b945050604061157d87828801611467565b93505060c061158e878288016113b6565b9250506101006115a087828801611518565b91505092959194509250565b60008115159050919050565b6115c1816115ac565b82525050565b60006020820190506115dc60008301846115b8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f76657269666965722d61582d6774652d7072696d652d71000000000000000000600082015250565b6000611658601783611611565b915061166382611622565b602082019050919050565b600060208201905081810360008301526116878161164b565b9050919050565b7f76657269666965722d61592d6774652d7072696d652d71000000000000000000600082015250565b60006116c4601783611611565b91506116cf8261168e565b602082019050919050565b600060208201905081810360008301526116f3816116b7565b9050919050565b7f76657269666965722d6258302d6774652d7072696d652d710000000000000000600082015250565b6000611730601883611611565b915061173b826116fa565b602082019050919050565b6000602082019050818103600083015261175f81611723565b9050919050565b7f76657269666965722d6259302d6774652d7072696d652d710000000000000000600082015250565b600061179c601883611611565b91506117a782611766565b602082019050919050565b600060208201905081810360008301526117cb8161178f565b9050919050565b7f76657269666965722d6258312d6774652d7072696d652d710000000000000000600082015250565b6000611808601883611611565b9150611813826117d2565b602082019050919050565b60006020820190508181036000830152611837816117fb565b9050919050565b7f76657269666965722d6259312d6774652d7072696d652d710000000000000000600082015250565b6000611874601883611611565b915061187f8261183e565b602082019050919050565b600060208201905081810360008301526118a381611867565b9050919050565b7f76657269666965722d63582d6774652d7072696d652d71000000000000000000600082015250565b60006118e0601783611611565b91506118eb826118aa565b602082019050919050565b6000602082019050818103600083015261190f816118d3565b9050919050565b7f76657269666965722d63592d6774652d7072696d652d71000000000000000000600082015250565b600061194c601783611611565b915061195782611916565b602082019050919050565b6000602082019050818103600083015261197b8161193f565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b60006119b8601f83611611565b91506119c382611982565b602082019050919050565b600060208201905081810360008301526119e7816119ab565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a2882611320565b9150611a3383611320565b9250828201905080821115611a4b57611a4a6119ee565b5b92915050565b6000611a5c82611320565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a8e57611a8d6119ee565b5b600182019050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b6000611acf601283611611565b9150611ada82611a99565b602082019050919050565b60006020820190508181036000830152611afe81611ac2565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b6000611b3b601283611611565b9150611b4682611b05565b602082019050919050565b60006020820190508181036000830152611b6a81611b2e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bab82611320565b9150611bb683611320565b925082611bc657611bc5611b71565b5b828206905092915050565b6000611bdc82611320565b9150611be783611320565b9250828203905081811115611bff57611bfe6119ee565b5b92915050565b6000611c1082611320565b9150611c1b83611320565b9250828202611c2981611320565b91508282048414831517611c4057611c3f6119ee565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611c7d601583611611565b9150611c8882611c47565b602082019050919050565b60006020820190508181036000830152611cac81611c70565b905091905056fea26469706673582212209b71610f408a86a7a24f798bf141940b214cd4635f13c97d794d1bf23a4b006364736f6c63430008110033",
}

// PrivateValueCircuitABI is the input ABI used to generate the binding from.
// Deprecated: Use PrivateValueCircuitMetaData.ABI instead.
var PrivateValueCircuitABI = PrivateValueCircuitMetaData.ABI

// PrivateValueCircuitBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrivateValueCircuitMetaData.Bin instead.
var PrivateValueCircuitBin = PrivateValueCircuitMetaData.Bin

// DeployPrivateValueCircuit deploys a new Ethereum contract, binding an instance of PrivateValueCircuit to it.
func DeployPrivateValueCircuit(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PrivateValueCircuit, error) {
	parsed, err := PrivateValueCircuitMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrivateValueCircuitBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PrivateValueCircuit{PrivateValueCircuitCaller: PrivateValueCircuitCaller{contract: contract}, PrivateValueCircuitTransactor: PrivateValueCircuitTransactor{contract: contract}, PrivateValueCircuitFilterer: PrivateValueCircuitFilterer{contract: contract}}, nil
}

// PrivateValueCircuit is an auto generated Go binding around an Ethereum contract.
type PrivateValueCircuit struct {
	PrivateValueCircuitCaller     // Read-only binding to the contract
	PrivateValueCircuitTransactor // Write-only binding to the contract
	PrivateValueCircuitFilterer   // Log filterer for contract events
}

// PrivateValueCircuitCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrivateValueCircuitCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrivateValueCircuitTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrivateValueCircuitTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrivateValueCircuitFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrivateValueCircuitFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrivateValueCircuitSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrivateValueCircuitSession struct {
	Contract     *PrivateValueCircuit // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// PrivateValueCircuitCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrivateValueCircuitCallerSession struct {
	Contract *PrivateValueCircuitCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// PrivateValueCircuitTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrivateValueCircuitTransactorSession struct {
	Contract     *PrivateValueCircuitTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// PrivateValueCircuitRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrivateValueCircuitRaw struct {
	Contract *PrivateValueCircuit // Generic contract binding to access the raw methods on
}

// PrivateValueCircuitCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrivateValueCircuitCallerRaw struct {
	Contract *PrivateValueCircuitCaller // Generic read-only contract binding to access the raw methods on
}

// PrivateValueCircuitTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrivateValueCircuitTransactorRaw struct {
	Contract *PrivateValueCircuitTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrivateValueCircuit creates a new instance of PrivateValueCircuit, bound to a specific deployed contract.
func NewPrivateValueCircuit(address common.Address, backend bind.ContractBackend) (*PrivateValueCircuit, error) {
	contract, err := bindPrivateValueCircuit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PrivateValueCircuit{PrivateValueCircuitCaller: PrivateValueCircuitCaller{contract: contract}, PrivateValueCircuitTransactor: PrivateValueCircuitTransactor{contract: contract}, PrivateValueCircuitFilterer: PrivateValueCircuitFilterer{contract: contract}}, nil
}

// NewPrivateValueCircuitCaller creates a new read-only instance of PrivateValueCircuit, bound to a specific deployed contract.
func NewPrivateValueCircuitCaller(address common.Address, caller bind.ContractCaller) (*PrivateValueCircuitCaller, error) {
	contract, err := bindPrivateValueCircuit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrivateValueCircuitCaller{contract: contract}, nil
}

// NewPrivateValueCircuitTransactor creates a new write-only instance of PrivateValueCircuit, bound to a specific deployed contract.
func NewPrivateValueCircuitTransactor(address common.Address, transactor bind.ContractTransactor) (*PrivateValueCircuitTransactor, error) {
	contract, err := bindPrivateValueCircuit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrivateValueCircuitTransactor{contract: contract}, nil
}

// NewPrivateValueCircuitFilterer creates a new log filterer instance of PrivateValueCircuit, bound to a specific deployed contract.
func NewPrivateValueCircuitFilterer(address common.Address, filterer bind.ContractFilterer) (*PrivateValueCircuitFilterer, error) {
	contract, err := bindPrivateValueCircuit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrivateValueCircuitFilterer{contract: contract}, nil
}

// bindPrivateValueCircuit binds a generic wrapper to an already deployed contract.
func bindPrivateValueCircuit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrivateValueCircuitABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PrivateValueCircuit *PrivateValueCircuitRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PrivateValueCircuit.Contract.PrivateValueCircuitCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PrivateValueCircuit *PrivateValueCircuitRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PrivateValueCircuit.Contract.PrivateValueCircuitTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PrivateValueCircuit *PrivateValueCircuitRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PrivateValueCircuit.Contract.PrivateValueCircuitTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PrivateValueCircuit *PrivateValueCircuitCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PrivateValueCircuit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PrivateValueCircuit *PrivateValueCircuitTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PrivateValueCircuit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PrivateValueCircuit *PrivateValueCircuitTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PrivateValueCircuit.Contract.contract.Transact(opts, method, params...)
}

// VerifyProof is a free data retrieval call binding the contract method 0x43753b4d.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] input) view returns(bool r)
func (_PrivateValueCircuit *PrivateValueCircuitCaller) VerifyProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [1]*big.Int) (bool, error) {
	var out []interface{}
	err := _PrivateValueCircuit.contract.Call(opts, &out, "verifyProof", a, b, c, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProof is a free data retrieval call binding the contract method 0x43753b4d.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] input) view returns(bool r)
func (_PrivateValueCircuit *PrivateValueCircuitSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [1]*big.Int) (bool, error) {
	return _PrivateValueCircuit.Contract.VerifyProof(&_PrivateValueCircuit.CallOpts, a, b, c, input)
}

// VerifyProof is a free data retrieval call binding the contract method 0x43753b4d.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] input) view returns(bool r)
func (_PrivateValueCircuit *PrivateValueCircuitCallerSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [1]*big.Int) (bool, error) {
	return _PrivateValueCircuit.Contract.VerifyProof(&_PrivateValueCircuit.CallOpts, a, b, c, input)
}
