// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package solidity

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BiddingCircuitMetaData contains all meta data concerning the BiddingCircuit contract.
var BiddingCircuitMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[5]\",\"name\":\"input\",\"type\":\"uint256[5]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50611ebc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806334baeab914610030575b600080fd5b61004a60048036038101906100459190611716565b610060565b604051610057919061179a565b60405180910390f35b600061006a6112b3565b604051806040016040528087600060028110610089576100886117b5565b5b60200201518152602001876001600281106100a7576100a66117b5565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100e1576100e06117b5565b5b60200201516000600281106100f9576100f86117b5565b5b6020020151815260200188600060028110610117576101166117b5565b5b602002015160016002811061012f5761012e6117b5565b5b6020020151815250815260200160405180604001604052808860016002811061015b5761015a6117b5565b5b6020020151600060028110610173576101726117b5565b5b6020020151815260200188600160028110610191576101906117b5565b5b60200201516001600281106101a9576101a86117b5565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101db576101da6117b5565b5b60200201518152602001856001600281106101f9576101f86117b5565b5b602002015181525081604001819052506000610213610735565b90506000604051806040016040528060008152602001600081525090507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360000151600001511061029a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029190611841565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783600001516020015110610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb906118ad565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47836020015160000151600060028110610341576103406117b5565b5b602002015110610386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037d90611919565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360200151602001516000600281106103c3576103c26117b5565b5b602002015110610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff90611985565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47836020015160000151600160028110610445576104446117b5565b5b60200201511061048a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610481906119f1565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360200151602001516001600281106104c7576104c66117b5565b5b60200201511061050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390611a5d565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783604001516000015110610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d90611ac9565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47836040015160200151106105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790611b35565b60405180910390fd5b60005b60058110156106cb577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018682600581106106205761061f6117b5565b5b602002015110610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c90611ba1565b60405180910390fd5b6106b6826106b1856080015160018561067e9190611bf0565b6006811061068f5761068e6117b5565b5b60200201518985600581106106a7576106a66117b5565b5b6020020151610ca9565b610d81565b915080806106c390611c24565b9150506105e3565b506106f28183608001516000600681106106e8576106e76117b5565b5b6020020151610d81565b90506107286107048460000151610e7f565b84602001518460000151856020015185876040015189604001518960600151610f3d565b9350505050949350505050565b61073d6112e6565b60405180604001604052807f19180f5623a57cc657840ae44d6c18fe24e081815938724f8ab7603b2feac6fc81526020017f034e5b4f8d5238e2f58641bd10bbc0e6cf19d533540f3600fd55075b899380b98152508160000181905250604051806040016040528060405180604001604052807f2e418f5f43a9afc562599d587c052bcd4a5f669dff0d0f4f5b4e2fe305801ef181526020017f225c4a652674ea7703d2dc96364c360337d75ef6d314e4e8c791e6cd047cff95815250815260200160405180604001604052807f2f079699d0451a2276e0df6601683f6084a8589bfc609013091661a2307ecbdd81526020017f2f36224579c4a2af1dfdf8e73ce60253bf9f0330cf47e3982fd36b0a31c050178152508152508160200181905250604051806040016040528060405180604001604052807f06b574bc2b9a3ea61785d6f9770f61ee324bb4525d6d6b88cb746eeac208be1981526020017f199397919aada7bffe365c2fde585d9e263426243d7b729c6cf824707754a288815250815260200160405180604001604052807f0a5c35cb53fc9cfc95b179e9fd818786a0719a254c88a4f410d3a05deb8a45df81526020017f22f3afa3bd83287858da5828b401e89c0bc2bf3de06398e6ed923a4abd62975d8152508152508160400181905250604051806040016040528060405180604001604052807f2fe63080f5e007a0e5da7002e8836140cbf89f549be4ef17e73418e83a79a89981526020017f1fd0260ad4a13138b1b72d83b1e052dc24c10eab118210881a36b16b5cdcf0f3815250815260200160405180604001604052807f2a81b3756ce57708a471880881463f551a440a92c57fcb658a568ddba2dce3f681526020017f29a170db93a17eac7a31e7bc3a43b2180d8f31b2f1dfc538cbe1e383e725d1c4815250815250816060018190525060405180604001604052807f24e97bf13041cf4f54401f1b0da6673b750fdacdf6e103bda4635b5e49f13b5d81526020017f0e5933987b82461721760c081f0eeeb726ae01b8d43fccca5df1bb9bff8512828152508160800151600060068110610a5657610a556117b5565b5b602002018190525060405180604001604052807f22379ad8448399a65dda158bbd37dadec0ea718155bee69051399e7379236c9e81526020017f2d2ab7edd0902fd098f8c63823d52437b12514c3eae4399136b63c2bad8219628152508160800151600160068110610acb57610aca6117b5565b5b602002018190525060405180604001604052807f218ab43acd274c0fde04ec2422fa2ce5f98e5927e7ecf421d73a2aac83b2778a81526020017f05582030bc2c205ede990276fb2f9b179a59166ab384119996f7e29beb99d91a8152508160800151600260068110610b4057610b3f6117b5565b5b602002018190525060405180604001604052807f22f2ba2f9539fcfbb71f6a7994944a58e945cae1774baf476f5241279713649b81526020017f1a926b8f92915f605ef080a3838b027f3b79ea49ed52a0385b369844dd0cd90c8152508160800151600360068110610bb557610bb46117b5565b5b602002018190525060405180604001604052807e60340753ddae36b242e0ba04bb088df04ea379734c712b7c57e7ecb7753d0a81526020017f2460498578d59a3ee3211835fa0e57f5c775645a644d93a19ea689695a6c78238152508160800151600460068110610c2957610c286117b5565b5b602002018190525060405180604001604052807f1145f2aae26dc10b08b9341572f683cb7c991378ac0a2d4ecf8b9047da3e838681526020017f0a6f96129ba317461b13e10e024bf5139784ff4d21a4254fd339a8af140e2ffc8152508160800151600560068110610c9e57610c9d6117b5565b5b602002018190525090565b610cb1611333565b610cb961134d565b836000015181600060038110610cd257610cd16117b5565b5b602002018181525050836020015181600160038110610cf457610cf36117b5565b5b6020020181815250508281600260038110610d1257610d116117b5565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610d3857fe5b5080610d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7090611cb8565b60405180910390fd5b505092915050565b610d89611333565b610d9161136f565b836000015181600060048110610daa57610da96117b5565b5b602002018181525050836020015181600160048110610dcc57610dcb6117b5565b5b602002018181525050826000015181600260048110610dee57610ded6117b5565b5b602002018181525050826020015181600360048110610e1057610e0f6117b5565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610e3657fe5b5080610e77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6e90611d24565b60405180910390fd5b505092915050565b610e87611333565b60008260000151148015610e9f575060008260200151145b15610ec25760405180604001604052806000815260200160008152509050610f38565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478460200151610f079190611d73565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610f329190611da4565b81525090505b919050565b60008060405180608001604052808b8152602001898152602001878152602001858152509050600060405180608001604052808b815260200189815260200187815260200185815250905060006018905060008167ffffffffffffffff811115610faa57610fa961144d565b5b604051908082528060200260200182016040528015610fd85781602001602082028036833780820191505090505b50905060005b6004811015611216576000600682610ff69190611dd8565b905085826004811061100b5761100a6117b5565b5b602002015160000151836000836110229190611bf0565b81518110611033576110326117b5565b5b602002602001018181525050858260048110611052576110516117b5565b5b602002015160200151836001836110699190611bf0565b8151811061107a576110796117b5565b5b602002602001018181525050848260048110611099576110986117b5565b5b6020020151600001516000600281106110b5576110b46117b5565b5b6020020151836002836110c89190611bf0565b815181106110d9576110d86117b5565b5b6020026020010181815250508482600481106110f8576110f76117b5565b5b602002015160000151600160028110611114576111136117b5565b5b6020020151836003836111279190611bf0565b81518110611138576111376117b5565b5b602002602001018181525050848260048110611157576111566117b5565b5b602002015160200151600060028110611173576111726117b5565b5b6020020151836004836111869190611bf0565b81518110611197576111966117b5565b5b6020026020010181815250508482600481106111b6576111b56117b5565b5b6020020151602001516001600281106111d2576111d16117b5565b5b6020020151836005836111e59190611bf0565b815181106111f6576111f56117b5565b5b60200260200101818152505050808061120e90611c24565b915050610fde565b5061121f611391565b6000602082602086026020860160086107d05a03fa9050806000810361124157fe5b5080611282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127990611e66565b60405180910390fd5b600082600060018110611298576112976117b5565b5b60200201511415965050505050505098975050505050505050565b60405180606001604052806112c6611333565b81526020016112d36113b3565b81526020016112e0611333565b81525090565b6040518060a001604052806112f9611333565b81526020016113066113b3565b81526020016113136113b3565b81526020016113206113b3565b815260200161132d6113d9565b81525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b60405180604001604052806113c6611406565b81526020016113d3611406565b81525090565b6040518060c001604052806006905b6113f0611333565b8152602001906001900390816113e85790505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114858261143c565b810181811067ffffffffffffffff821117156114a4576114a361144d565b5b80604052505050565b60006114b7611428565b90506114c3828261147c565b919050565b600067ffffffffffffffff8211156114e3576114e261144d565b5b602082029050919050565b600080fd5b6000819050919050565b611506816114f3565b811461151157600080fd5b50565b600081359050611523816114fd565b92915050565b600061153c611537846114c8565b6114ad565b90508060208402830185811115611556576115556114ee565b5b835b8181101561157f578061156b8882611514565b845260208401935050602081019050611558565b5050509392505050565b600082601f83011261159e5761159d611437565b5b60026115ab848285611529565b91505092915050565b600067ffffffffffffffff8211156115cf576115ce61144d565b5b602082029050919050565b60006115ed6115e8846115b4565b6114ad565b90508060408402830185811115611607576116066114ee565b5b835b81811015611630578061161c8882611589565b845260208401935050604081019050611609565b5050509392505050565b600082601f83011261164f5761164e611437565b5b600261165c8482856115da565b91505092915050565b600067ffffffffffffffff8211156116805761167f61144d565b5b602082029050919050565b600061169e61169984611665565b6114ad565b905080602084028301858111156116b8576116b76114ee565b5b835b818110156116e157806116cd8882611514565b8452602084019350506020810190506116ba565b5050509392505050565b600082601f830112611700576116ff611437565b5b600561170d84828561168b565b91505092915050565b6000806000806101a0858703121561173157611730611432565b5b600061173f87828801611589565b94505060406117508782880161163a565b93505060c061176187828801611589565b925050610100611773878288016116eb565b91505092959194509250565b60008115159050919050565b6117948161177f565b82525050565b60006020820190506117af600083018461178b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f76657269666965722d61582d6774652d7072696d652d71000000000000000000600082015250565b600061182b6017836117e4565b9150611836826117f5565b602082019050919050565b6000602082019050818103600083015261185a8161181e565b9050919050565b7f76657269666965722d61592d6774652d7072696d652d71000000000000000000600082015250565b60006118976017836117e4565b91506118a282611861565b602082019050919050565b600060208201905081810360008301526118c68161188a565b9050919050565b7f76657269666965722d6258302d6774652d7072696d652d710000000000000000600082015250565b60006119036018836117e4565b915061190e826118cd565b602082019050919050565b60006020820190508181036000830152611932816118f6565b9050919050565b7f76657269666965722d6259302d6774652d7072696d652d710000000000000000600082015250565b600061196f6018836117e4565b915061197a82611939565b602082019050919050565b6000602082019050818103600083015261199e81611962565b9050919050565b7f76657269666965722d6258312d6774652d7072696d652d710000000000000000600082015250565b60006119db6018836117e4565b91506119e6826119a5565b602082019050919050565b60006020820190508181036000830152611a0a816119ce565b9050919050565b7f76657269666965722d6259312d6774652d7072696d652d710000000000000000600082015250565b6000611a476018836117e4565b9150611a5282611a11565b602082019050919050565b60006020820190508181036000830152611a7681611a3a565b9050919050565b7f76657269666965722d63582d6774652d7072696d652d71000000000000000000600082015250565b6000611ab36017836117e4565b9150611abe82611a7d565b602082019050919050565b60006020820190508181036000830152611ae281611aa6565b9050919050565b7f76657269666965722d63592d6774652d7072696d652d71000000000000000000600082015250565b6000611b1f6017836117e4565b9150611b2a82611ae9565b602082019050919050565b60006020820190508181036000830152611b4e81611b12565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b6000611b8b601f836117e4565b9150611b9682611b55565b602082019050919050565b60006020820190508181036000830152611bba81611b7e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bfb826114f3565b9150611c06836114f3565b9250828201905080821115611c1e57611c1d611bc1565b5b92915050565b6000611c2f826114f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c6157611c60611bc1565b5b600182019050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b6000611ca26012836117e4565b9150611cad82611c6c565b602082019050919050565b60006020820190508181036000830152611cd181611c95565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b6000611d0e6012836117e4565b9150611d1982611cd8565b602082019050919050565b60006020820190508181036000830152611d3d81611d01565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d7e826114f3565b9150611d89836114f3565b925082611d9957611d98611d44565b5b828206905092915050565b6000611daf826114f3565b9150611dba836114f3565b9250828203905081811115611dd257611dd1611bc1565b5b92915050565b6000611de3826114f3565b9150611dee836114f3565b9250828202611dfc816114f3565b91508282048414831517611e1357611e12611bc1565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611e506015836117e4565b9150611e5b82611e1a565b602082019050919050565b60006020820190508181036000830152611e7f81611e43565b905091905056fea26469706673582212204a243d4f1432d9b979d290bb6b71afc869ff0fe6fd7a060ed64aae51316c96c664736f6c63430008110033",
}

// BiddingCircuitABI is the input ABI used to generate the binding from.
// Deprecated: Use BiddingCircuitMetaData.ABI instead.
var BiddingCircuitABI = BiddingCircuitMetaData.ABI

// BiddingCircuitBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BiddingCircuitMetaData.Bin instead.
var BiddingCircuitBin = BiddingCircuitMetaData.Bin

// DeployBiddingCircuit deploys a new Ethereum contract, binding an instance of BiddingCircuit to it.
func DeployBiddingCircuit(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BiddingCircuit, error) {
	parsed, err := BiddingCircuitMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BiddingCircuitBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BiddingCircuit{BiddingCircuitCaller: BiddingCircuitCaller{contract: contract}, BiddingCircuitTransactor: BiddingCircuitTransactor{contract: contract}, BiddingCircuitFilterer: BiddingCircuitFilterer{contract: contract}}, nil
}

// BiddingCircuit is an auto generated Go binding around an Ethereum contract.
type BiddingCircuit struct {
	BiddingCircuitCaller     // Read-only binding to the contract
	BiddingCircuitTransactor // Write-only binding to the contract
	BiddingCircuitFilterer   // Log filterer for contract events
}

// BiddingCircuitCaller is an auto generated read-only Go binding around an Ethereum contract.
type BiddingCircuitCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BiddingCircuitTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BiddingCircuitTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BiddingCircuitFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BiddingCircuitFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BiddingCircuitSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BiddingCircuitSession struct {
	Contract     *BiddingCircuit   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BiddingCircuitCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BiddingCircuitCallerSession struct {
	Contract *BiddingCircuitCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BiddingCircuitTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BiddingCircuitTransactorSession struct {
	Contract     *BiddingCircuitTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BiddingCircuitRaw is an auto generated low-level Go binding around an Ethereum contract.
type BiddingCircuitRaw struct {
	Contract *BiddingCircuit // Generic contract binding to access the raw methods on
}

// BiddingCircuitCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BiddingCircuitCallerRaw struct {
	Contract *BiddingCircuitCaller // Generic read-only contract binding to access the raw methods on
}

// BiddingCircuitTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BiddingCircuitTransactorRaw struct {
	Contract *BiddingCircuitTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBiddingCircuit creates a new instance of BiddingCircuit, bound to a specific deployed contract.
func NewBiddingCircuit(address common.Address, backend bind.ContractBackend) (*BiddingCircuit, error) {
	contract, err := bindBiddingCircuit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BiddingCircuit{BiddingCircuitCaller: BiddingCircuitCaller{contract: contract}, BiddingCircuitTransactor: BiddingCircuitTransactor{contract: contract}, BiddingCircuitFilterer: BiddingCircuitFilterer{contract: contract}}, nil
}

// NewBiddingCircuitCaller creates a new read-only instance of BiddingCircuit, bound to a specific deployed contract.
func NewBiddingCircuitCaller(address common.Address, caller bind.ContractCaller) (*BiddingCircuitCaller, error) {
	contract, err := bindBiddingCircuit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BiddingCircuitCaller{contract: contract}, nil
}

// NewBiddingCircuitTransactor creates a new write-only instance of BiddingCircuit, bound to a specific deployed contract.
func NewBiddingCircuitTransactor(address common.Address, transactor bind.ContractTransactor) (*BiddingCircuitTransactor, error) {
	contract, err := bindBiddingCircuit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BiddingCircuitTransactor{contract: contract}, nil
}

// NewBiddingCircuitFilterer creates a new log filterer instance of BiddingCircuit, bound to a specific deployed contract.
func NewBiddingCircuitFilterer(address common.Address, filterer bind.ContractFilterer) (*BiddingCircuitFilterer, error) {
	contract, err := bindBiddingCircuit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BiddingCircuitFilterer{contract: contract}, nil
}

// bindBiddingCircuit binds a generic wrapper to an already deployed contract.
func bindBiddingCircuit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BiddingCircuitABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BiddingCircuit *BiddingCircuitRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BiddingCircuit.Contract.BiddingCircuitCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BiddingCircuit *BiddingCircuitRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BiddingCircuit.Contract.BiddingCircuitTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BiddingCircuit *BiddingCircuitRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BiddingCircuit.Contract.BiddingCircuitTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BiddingCircuit *BiddingCircuitCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BiddingCircuit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BiddingCircuit *BiddingCircuitTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BiddingCircuit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BiddingCircuit *BiddingCircuitTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BiddingCircuit.Contract.contract.Transact(opts, method, params...)
}

// VerifyProof is a free data retrieval call binding the contract method 0x34baeab9.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[5] input) view returns(bool r)
func (_BiddingCircuit *BiddingCircuitCaller) VerifyProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [5]*big.Int) (bool, error) {
	var out []interface{}
	err := _BiddingCircuit.contract.Call(opts, &out, "verifyProof", a, b, c, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProof is a free data retrieval call binding the contract method 0x34baeab9.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[5] input) view returns(bool r)
func (_BiddingCircuit *BiddingCircuitSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [5]*big.Int) (bool, error) {
	return _BiddingCircuit.Contract.VerifyProof(&_BiddingCircuit.CallOpts, a, b, c, input)
}

// VerifyProof is a free data retrieval call binding the contract method 0x34baeab9.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[5] input) view returns(bool r)
func (_BiddingCircuit *BiddingCircuitCallerSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [5]*big.Int) (bool, error) {
	return _BiddingCircuit.Contract.VerifyProof(&_BiddingCircuit.CallOpts, a, b, c, input)
}
