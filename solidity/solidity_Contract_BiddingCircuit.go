// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package solidity

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BiddingCircuitMetaData contains all meta data concerning the BiddingCircuit contract.
var BiddingCircuitMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50611e48806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635fe8c13b14610030575b600080fd5b61004a600480360381019061004591906116a2565b610060565b6040516100579190611726565b60405180910390f35b600061006a61123f565b60405180604001604052808760006002811061008957610088611741565b5b60200201518152602001876001600281106100a7576100a6611741565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100e1576100e0611741565b5b60200201516000600281106100f9576100f8611741565b5b602002015181526020018860006002811061011757610116611741565b5b602002015160016002811061012f5761012e611741565b5b6020020151815250815260200160405180604001604052808860016002811061015b5761015a611741565b5b602002015160006002811061017357610172611741565b5b602002015181526020018860016002811061019157610190611741565b5b60200201516001600281106101a9576101a8611741565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101db576101da611741565b5b60200201518152602001856001600281106101f9576101f8611741565b5b602002015181525081604001819052506000610213610735565b90506000604051806040016040528060008152602001600081525090507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360000151600001511061029a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610291906117cd565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783600001516020015110610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb90611839565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783602001516000015160006002811061034157610340611741565b5b602002015110610386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037d906118a5565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360200151602001516000600281106103c3576103c2611741565b5b602002015110610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff90611911565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783602001516000015160016002811061044557610444611741565b5b60200201511061048a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104819061197d565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478360200151602001516001600281106104c7576104c6611741565b5b60200201511061050c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610503906119e9565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783604001516000015110610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d90611a55565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47836040015160200151106105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790611ac1565b60405180910390fd5b60005b60048110156106cb577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018682600481106106205761061f611741565b5b602002015110610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c90611b2d565b60405180910390fd5b6106b6826106b1856080015160018561067e9190611b7c565b6005811061068f5761068e611741565b5b60200201518985600481106106a7576106a6611741565b5b6020020151610c35565b610d0d565b915080806106c390611bb0565b9150506105e3565b506106f28183608001516000600581106106e8576106e7611741565b5b6020020151610d0d565b90506107286107048460000151610e0b565b84602001518460000151856020015185876040015189604001518960600151610ec9565b9350505050949350505050565b61073d611272565b60405180604001604052807f2bd2f98b70b07ca0264003e7dcc31abf2e6e059cf319011652083ac9ceb4b1cc81526020017f111a91042e722f26efdc0998878d859e7867a7e012b6b077f848d2f8feb623068152508160000181905250604051806040016040528060405180604001604052807f1ef4ae738b1f6a9f9106695a0b0d5d41330933511cb9fad9ab882731ca4f863881526020017f1f4a182cab3a060eaaaaac454071d09295d8adbfbeee915bb920f267129333fc815250815260200160405180604001604052807f1dcb6c84689d0dc820505cdf1fb354fea8f2562477316bb2bbc0200092c7ec3581526020017f017bb4911bd054c39f0d851455079b41115404ee3a493eabbf14842d91ddf1488152508152508160200181905250604051806040016040528060405180604001604052807f0d9323e62b631bf6f49dd3903dae08ec2c775c51d39e12729b749ec41f9705f881526020017f0cfa5a6bf78dd7284a556bb86b6a080e9e75c0e4653f48c3bb78420fb27f13ca815250815260200160405180604001604052807f126ba60ae119faa7820bbb3a2bc1578a51840c877c8adcae1f1cae6cc7452eb081526020017f0aa03bc985f1f78461c016ad046d9c1a57634528493de3aecb61f7a72aafc9d78152508152508160400181905250604051806040016040528060405180604001604052807f182e5c899ea7608e929ce8882ec63a11ca9fb89c4e2f77f025c661eab16520f681526020017f2aa82cccc8b8b1744c27e142ed2e75ad58865012045d9c2f2ff88c7421b4bae7815250815260200160405180604001604052807f18ebd9372a40ab6d4452e2d65b633a5912fcc2916dd2117b05e5ad238d1d621981526020017f212bf7e8c34b00b575d68897f990ddde71f7f0232f7492aa038fdbd79bb43a65815250815250816060018190525060405180604001604052807f1132db45f802e5ffc363bd278425204c95283ac6c4f1b0615bb8153999e0589081526020017f2730a01730d0ab974788f6ca6e03753875012267e18a7066c570872e47338cbc8152508160800151600060058110610a5657610a55611741565b5b602002018190525060405180604001604052807f0749773fc83efbd937e83ab6c4d59b661141fe7e6369b01f8144bc2772efe92681526020017f1ea8bdb5b1217696c4893f1d70d0f637b1e89b8fa4dbb2459780ae10686036838152508160800151600160058110610acb57610aca611741565b5b602002018190525060405180604001604052807f24e9a1d82f050968cc97ddf0da41cfc8da11e5a11350634be2f0caa16fde3af381526020017f2373b625c25d9b16f6af36f637115c6fdd88c79fb952ae78418767af721b8f038152508160800151600260058110610b4057610b3f611741565b5b602002018190525060405180604001604052807f25e4a7e7559c81c1820d50da1fc15c85741d5843e031207a205b211771e5503581526020017f0c61e727876ca90e6f2b9c444cfe565a7e95a4091d9b1deace25a5c8d86158278152508160800151600360058110610bb557610bb4611741565b5b602002018190525060405180604001604052807f2661390aed1ccf7cbee51ebfd8eb1386225f026e00f1a5e47d2dd6fa5c4a3bef81526020017f018faff18de1f7c3edf16f209791ce61e2635dfb9e9e1321a1c2b21966d1033e8152508160800151600460058110610c2a57610c29611741565b5b602002018190525090565b610c3d6112bf565b610c456112d9565b836000015181600060038110610c5e57610c5d611741565b5b602002018181525050836020015181600160038110610c8057610c7f611741565b5b6020020181815250508281600260038110610c9e57610c9d611741565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610cc457fe5b5080610d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfc90611c44565b60405180910390fd5b505092915050565b610d156112bf565b610d1d6112fb565b836000015181600060048110610d3657610d35611741565b5b602002018181525050836020015181600160048110610d5857610d57611741565b5b602002018181525050826000015181600260048110610d7a57610d79611741565b5b602002018181525050826020015181600360048110610d9c57610d9b611741565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610dc257fe5b5080610e03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfa90611cb0565b60405180910390fd5b505092915050565b610e136112bf565b60008260000151148015610e2b575060008260200151145b15610e4e5760405180604001604052806000815260200160008152509050610ec4565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478460200151610e939190611cff565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610ebe9190611d30565b81525090505b919050565b60008060405180608001604052808b8152602001898152602001878152602001858152509050600060405180608001604052808b815260200189815260200187815260200185815250905060006018905060008167ffffffffffffffff811115610f3657610f356113d9565b5b604051908082528060200260200182016040528015610f645781602001602082028036833780820191505090505b50905060005b60048110156111a2576000600682610f829190611d64565b9050858260048110610f9757610f96611741565b5b60200201516000015183600083610fae9190611b7c565b81518110610fbf57610fbe611741565b5b602002602001018181525050858260048110610fde57610fdd611741565b5b60200201516020015183600183610ff59190611b7c565b8151811061100657611005611741565b5b60200260200101818152505084826004811061102557611024611741565b5b60200201516000015160006002811061104157611040611741565b5b6020020151836002836110549190611b7c565b8151811061106557611064611741565b5b60200260200101818152505084826004811061108457611083611741565b5b6020020151600001516001600281106110a05761109f611741565b5b6020020151836003836110b39190611b7c565b815181106110c4576110c3611741565b5b6020026020010181815250508482600481106110e3576110e2611741565b5b6020020151602001516000600281106110ff576110fe611741565b5b6020020151836004836111129190611b7c565b8151811061112357611122611741565b5b60200260200101818152505084826004811061114257611141611741565b5b60200201516020015160016002811061115e5761115d611741565b5b6020020151836005836111719190611b7c565b8151811061118257611181611741565b5b60200260200101818152505050808061119a90611bb0565b915050610f6a565b506111ab61131d565b6000602082602086026020860160086107d05a03fa905080600081036111cd57fe5b508061120e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120590611df2565b60405180910390fd5b60008260006001811061122457611223611741565b5b60200201511415965050505050505098975050505050505050565b60405180606001604052806112526112bf565b815260200161125f61133f565b815260200161126c6112bf565b81525090565b6040518060a001604052806112856112bf565b815260200161129261133f565b815260200161129f61133f565b81526020016112ac61133f565b81526020016112b9611365565b81525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280611352611392565b815260200161135f611392565b81525090565b6040518060a001604052806005905b61137c6112bf565b8152602001906001900390816113745790505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611411826113c8565b810181811067ffffffffffffffff821117156114305761142f6113d9565b5b80604052505050565b60006114436113b4565b905061144f8282611408565b919050565b600067ffffffffffffffff82111561146f5761146e6113d9565b5b602082029050919050565b600080fd5b6000819050919050565b6114928161147f565b811461149d57600080fd5b50565b6000813590506114af81611489565b92915050565b60006114c86114c384611454565b611439565b905080602084028301858111156114e2576114e161147a565b5b835b8181101561150b57806114f788826114a0565b8452602084019350506020810190506114e4565b5050509392505050565b600082601f83011261152a576115296113c3565b5b60026115378482856114b5565b91505092915050565b600067ffffffffffffffff82111561155b5761155a6113d9565b5b602082029050919050565b600061157961157484611540565b611439565b905080604084028301858111156115935761159261147a565b5b835b818110156115bc57806115a88882611515565b845260208401935050604081019050611595565b5050509392505050565b600082601f8301126115db576115da6113c3565b5b60026115e8848285611566565b91505092915050565b600067ffffffffffffffff82111561160c5761160b6113d9565b5b602082029050919050565b600061162a611625846115f1565b611439565b905080602084028301858111156116445761164361147a565b5b835b8181101561166d578061165988826114a0565b845260208401935050602081019050611646565b5050509392505050565b600082601f83011261168c5761168b6113c3565b5b6004611699848285611617565b91505092915050565b60008060008061018085870312156116bd576116bc6113be565b5b60006116cb87828801611515565b94505060406116dc878288016115c6565b93505060c06116ed87828801611515565b9250506101006116ff87828801611677565b91505092959194509250565b60008115159050919050565b6117208161170b565b82525050565b600060208201905061173b6000830184611717565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f76657269666965722d61582d6774652d7072696d652d71000000000000000000600082015250565b60006117b7601783611770565b91506117c282611781565b602082019050919050565b600060208201905081810360008301526117e6816117aa565b9050919050565b7f76657269666965722d61592d6774652d7072696d652d71000000000000000000600082015250565b6000611823601783611770565b915061182e826117ed565b602082019050919050565b6000602082019050818103600083015261185281611816565b9050919050565b7f76657269666965722d6258302d6774652d7072696d652d710000000000000000600082015250565b600061188f601883611770565b915061189a82611859565b602082019050919050565b600060208201905081810360008301526118be81611882565b9050919050565b7f76657269666965722d6259302d6774652d7072696d652d710000000000000000600082015250565b60006118fb601883611770565b9150611906826118c5565b602082019050919050565b6000602082019050818103600083015261192a816118ee565b9050919050565b7f76657269666965722d6258312d6774652d7072696d652d710000000000000000600082015250565b6000611967601883611770565b915061197282611931565b602082019050919050565b600060208201905081810360008301526119968161195a565b9050919050565b7f76657269666965722d6259312d6774652d7072696d652d710000000000000000600082015250565b60006119d3601883611770565b91506119de8261199d565b602082019050919050565b60006020820190508181036000830152611a02816119c6565b9050919050565b7f76657269666965722d63582d6774652d7072696d652d71000000000000000000600082015250565b6000611a3f601783611770565b9150611a4a82611a09565b602082019050919050565b60006020820190508181036000830152611a6e81611a32565b9050919050565b7f76657269666965722d63592d6774652d7072696d652d71000000000000000000600082015250565b6000611aab601783611770565b9150611ab682611a75565b602082019050919050565b60006020820190508181036000830152611ada81611a9e565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b6000611b17601f83611770565b9150611b2282611ae1565b602082019050919050565b60006020820190508181036000830152611b4681611b0a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b878261147f565b9150611b928361147f565b9250828201905080821115611baa57611ba9611b4d565b5b92915050565b6000611bbb8261147f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611bed57611bec611b4d565b5b600182019050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b6000611c2e601283611770565b9150611c3982611bf8565b602082019050919050565b60006020820190508181036000830152611c5d81611c21565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b6000611c9a601283611770565b9150611ca582611c64565b602082019050919050565b60006020820190508181036000830152611cc981611c8d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d0a8261147f565b9150611d158361147f565b925082611d2557611d24611cd0565b5b828206905092915050565b6000611d3b8261147f565b9150611d468361147f565b9250828203905081811115611d5e57611d5d611b4d565b5b92915050565b6000611d6f8261147f565b9150611d7a8361147f565b9250828202611d888161147f565b91508282048414831517611d9f57611d9e611b4d565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611ddc601583611770565b9150611de782611da6565b602082019050919050565b60006020820190508181036000830152611e0b81611dcf565b905091905056fea2646970667358221220302c3663aaaf76dd4e2f3db94e1df0aeb6b0c0cbef09d007680dbd74e88f8ca864736f6c63430008110033",
}

// BiddingCircuitABI is the input ABI used to generate the binding from.
// Deprecated: Use BiddingCircuitMetaData.ABI instead.
var BiddingCircuitABI = BiddingCircuitMetaData.ABI

// BiddingCircuitBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BiddingCircuitMetaData.Bin instead.
var BiddingCircuitBin = BiddingCircuitMetaData.Bin

// DeployBiddingCircuit deploys a new Ethereum contract, binding an instance of BiddingCircuit to it.
func DeployBiddingCircuit(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BiddingCircuit, error) {
	parsed, err := BiddingCircuitMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BiddingCircuitBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BiddingCircuit{BiddingCircuitCaller: BiddingCircuitCaller{contract: contract}, BiddingCircuitTransactor: BiddingCircuitTransactor{contract: contract}, BiddingCircuitFilterer: BiddingCircuitFilterer{contract: contract}}, nil
}

// BiddingCircuit is an auto generated Go binding around an Ethereum contract.
type BiddingCircuit struct {
	BiddingCircuitCaller     // Read-only binding to the contract
	BiddingCircuitTransactor // Write-only binding to the contract
	BiddingCircuitFilterer   // Log filterer for contract events
}

// BiddingCircuitCaller is an auto generated read-only Go binding around an Ethereum contract.
type BiddingCircuitCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BiddingCircuitTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BiddingCircuitTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BiddingCircuitFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BiddingCircuitFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BiddingCircuitSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BiddingCircuitSession struct {
	Contract     *BiddingCircuit   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BiddingCircuitCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BiddingCircuitCallerSession struct {
	Contract *BiddingCircuitCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BiddingCircuitTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BiddingCircuitTransactorSession struct {
	Contract     *BiddingCircuitTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BiddingCircuitRaw is an auto generated low-level Go binding around an Ethereum contract.
type BiddingCircuitRaw struct {
	Contract *BiddingCircuit // Generic contract binding to access the raw methods on
}

// BiddingCircuitCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BiddingCircuitCallerRaw struct {
	Contract *BiddingCircuitCaller // Generic read-only contract binding to access the raw methods on
}

// BiddingCircuitTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BiddingCircuitTransactorRaw struct {
	Contract *BiddingCircuitTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBiddingCircuit creates a new instance of BiddingCircuit, bound to a specific deployed contract.
func NewBiddingCircuit(address common.Address, backend bind.ContractBackend) (*BiddingCircuit, error) {
	contract, err := bindBiddingCircuit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BiddingCircuit{BiddingCircuitCaller: BiddingCircuitCaller{contract: contract}, BiddingCircuitTransactor: BiddingCircuitTransactor{contract: contract}, BiddingCircuitFilterer: BiddingCircuitFilterer{contract: contract}}, nil
}

// NewBiddingCircuitCaller creates a new read-only instance of BiddingCircuit, bound to a specific deployed contract.
func NewBiddingCircuitCaller(address common.Address, caller bind.ContractCaller) (*BiddingCircuitCaller, error) {
	contract, err := bindBiddingCircuit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BiddingCircuitCaller{contract: contract}, nil
}

// NewBiddingCircuitTransactor creates a new write-only instance of BiddingCircuit, bound to a specific deployed contract.
func NewBiddingCircuitTransactor(address common.Address, transactor bind.ContractTransactor) (*BiddingCircuitTransactor, error) {
	contract, err := bindBiddingCircuit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BiddingCircuitTransactor{contract: contract}, nil
}

// NewBiddingCircuitFilterer creates a new log filterer instance of BiddingCircuit, bound to a specific deployed contract.
func NewBiddingCircuitFilterer(address common.Address, filterer bind.ContractFilterer) (*BiddingCircuitFilterer, error) {
	contract, err := bindBiddingCircuit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BiddingCircuitFilterer{contract: contract}, nil
}

// bindBiddingCircuit binds a generic wrapper to an already deployed contract.
func bindBiddingCircuit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BiddingCircuitABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BiddingCircuit *BiddingCircuitRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BiddingCircuit.Contract.BiddingCircuitCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BiddingCircuit *BiddingCircuitRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BiddingCircuit.Contract.BiddingCircuitTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BiddingCircuit *BiddingCircuitRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BiddingCircuit.Contract.BiddingCircuitTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BiddingCircuit *BiddingCircuitCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BiddingCircuit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BiddingCircuit *BiddingCircuitTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BiddingCircuit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BiddingCircuit *BiddingCircuitTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BiddingCircuit.Contract.contract.Transact(opts, method, params...)
}

// VerifyProof is a free data retrieval call binding the contract method 0x5fe8c13b.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[4] input) view returns(bool r)
func (_BiddingCircuit *BiddingCircuitCaller) VerifyProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [4]*big.Int) (bool, error) {
	var out []interface{}
	err := _BiddingCircuit.contract.Call(opts, &out, "verifyProof", a, b, c, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProof is a free data retrieval call binding the contract method 0x5fe8c13b.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[4] input) view returns(bool r)
func (_BiddingCircuit *BiddingCircuitSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [4]*big.Int) (bool, error) {
	return _BiddingCircuit.Contract.VerifyProof(&_BiddingCircuit.CallOpts, a, b, c, input)
}

// VerifyProof is a free data retrieval call binding the contract method 0x5fe8c13b.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[4] input) view returns(bool r)
func (_BiddingCircuit *BiddingCircuitCallerSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [4]*big.Int) (bool, error) {
	return _BiddingCircuit.Contract.VerifyProof(&_BiddingCircuit.CallOpts, a, b, c, input)
}
